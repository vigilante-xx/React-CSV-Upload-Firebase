{"version":3,"sources":["components/Spinner/Spinner.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","Home","props","onDrop","files","setState","isLoading","file","reader","FileReader","onload","csv","parse","result","err","data","burgerList","i","newBurger","push","axios","post","process","headers","then","res","console","log","length","M","toast","html","classes","catch","error","readAsBinaryString","state","display","align","onContextMenu","accept","onDropAccepted","this","size","color","Component","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qOAOeA,G,MAJC,kBACZ,yBAAKC,UAAU,UAAf,gB,2DC8EWC,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,OAAS,SAACC,GAER,EAAKC,SAAS,CAAED,QAAOE,WAAW,IAClC,IAAMC,EAAOH,EAAM,GAEbI,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdC,IAAIC,MAAMJ,EAAOK,QAAQ,SAACC,EAAKC,GAG7B,IADA,IAAMC,EAAa,GAFmB,WAG7BC,GACP,IAGMC,EAAY,CAAE,KAHPH,EAAKE,GAAG,GAGa,KAFrBF,EAAKE,GAAG,GAE2B,MADlCF,EAAKE,GAAG,IAEtBD,EAAWG,KAAKD,GAChBE,IAAMC,KAAN,UAAcC,+CAAd,iBAAiEJ,EAAW,CACxEK,QAAS,CACP,eAAgB,sBAEnBC,MAAK,SAAAC,GACNC,QAAQC,IAAIF,GACRR,IAAMF,EAAKa,OAAS,IACtB,EAAKvB,SAAS,CAAEC,WAAW,IAC3BuB,IAAEC,MAAM,CAACC,KAAM,yBAA0BC,QAAQ,+BAGpDC,OAAM,SAAAC,GACDjB,IAAMF,EAAKa,OAAS,IACtB,EAAKvB,SAAS,CAAEC,WAAW,IAC3BuB,IAAEC,MAAM,CAACC,KAAM,yBAA0BC,QAAQ,gCApB9Cf,EAAI,EAAGA,EAAIF,EAAKa,OAAQX,IAAM,EAA9BA,OA4BbT,EAAO2B,mBAAmB5B,IA3C1B,EAAK6B,MAAQ,CACX9B,WAAW,GAHI,E,qDAkDjB,IAEI+B,EACF,yBAAKC,MAAM,SAASC,cAAe,kBAAO,IACxC,6BAAM,6BAAM,6BACZ,kBAAC,IAAD,CAAUC,OAAO,OAAOC,eAAgBC,KAAKvC,SAE7C,6BAAM,6BAAM,6BACZ,mDAAwB,0BAAMwC,KARjB,EAQiCC,MAAM,WAA5B,OAAgD,6BAAxE,eAOJ,OAJIF,KAAKN,MAAM9B,YACb+B,EAAU,kBAAC,EAAD,OAIV,6BACGA,O,GArEUQ,aCSJC,E,uKARX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhD,S,GANvB4C,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAM+B,a","file":"static/js/main.ed06ca11.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => (\r\n    <div className=\"loader\">Loading...</div>\r\n);\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport Spinner from './Spinner/Spinner';\r\nimport M from 'materialize-css';\r\nimport axios from 'axios';\r\nimport Dropzone from 'react-dropzone';\r\nimport csv from 'csv';\r\n\r\nclass Home extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n    }\r\n  }\r\n\r\n  onDrop = (files) => {\r\n\r\n    this.setState({ files, isLoading: true });\r\n    const file = files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n\r\n        const burgerList = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n          const name = data[i][0];\r\n          const size = data[i][1];\r\n          const price = data[i][2];\r\n          const newBurger = { \"Name\": name, \"Size\": size, \"Price\": price };\r\n          burgerList.push(newBurger);\r\n          axios.post(`${process.env.REACT_APP_DATABASE_URL}/burgers.json`, newBurger, {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n            } \r\n          }).then(res => {\r\n            console.log(res);\r\n            if (i === data.length - 1) {\r\n              this.setState({ isLoading: false });\r\n              M.toast({html: 'Uploaded Successfully!', classes:\"#43a047 green darken-1\"});\r\n            }\r\n          })\r\n          .catch(error => {\r\n            if (i === data.length - 1) {\r\n              this.setState({ isLoading: false });\r\n              M.toast({html: 'Uploaded Successfully!', classes:\"#43a047 green darken-1\"});\r\n            }\r\n          });\r\n\r\n        };\r\n      });\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  }\r\n\r\n  render() {\r\n\r\n    const fontSize = 5;\r\n    \r\n    let display = (\r\n      <div align=\"center\" onContextMenu={() =>  false}>\r\n        <br /><br /><br />\r\n        <Dropzone accept=\".csv\" onDropAccepted={this.onDrop}>            \r\n        </Dropzone>\r\n        <br /><br /><br />\r\n        <h4>Upload or drop your <font size={fontSize} color=\"#00A4FF\">CSV</font><br /> file here</h4>\r\n      </div>\r\n    );\r\n    if (this.state.isLoading) {\r\n      display = <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {display}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from './components/Home';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Router>\r\n        <Route path=\"/\" exact component={Home} />\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}